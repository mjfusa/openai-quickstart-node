import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function (req, res) {
  if (!configuration.apiKey) {
    res.status(500).json({
      error: {
        message: "OpenAI API key not configured, please follow instructions in README.md",
      }
    });
    return;
  }

  const animal = req.body.animal || '';
  if (animal.trim().length === 0) {
    res.status(400).json({
      error: {
        message: "Please enter a valid animal",
      }
    });
    return;
  }

  try {
    const capitalizedAnimal =upperCaseInput(animal);
    const completion = await openai.createChatCompletion({
      model:"gpt-3.5-turbo-0301",
      messages: [
        // The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with â€œYou are a helpful assistant
        {"role": "system", "content": "You are a helpful assistant. Keep responses brief."},
        // The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior
        {"role": "assistant","content": "Animal: Cat Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline"},
        // The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
        {"role":"user", "content":"Suggest three names for an animal that is a superhero. Animal: " + capitalizedAnimal },
      ],
      // The temperature (Range 0 - 1). The closer to 0, the more deterministic, the closer to 1 the more diverse the response.
      temperature: 0.8,
    });
    res.status(200).json({ result: completion.data.choices[0].message.content });
  } catch(error) {
    // Consider adjusting the error handling logic for your use case
    if (error.response) {
      console.error(error.response.status, error.response.data);
      res.status(error.response.status).json(error.response.data);
    } else {
      console.error(`Error with OpenAI API request: ${error.message}`);
      res.status(500).json({
        error: {
          message: 'An error occurred during your request.',
        }
      });
    }
  }
}

// function generatePrompt(animal) {
//   const capitalizedAnimal =
//     animal[0].toUpperCase() + animal.slice(1).toLowerCase();
//   return `Suggest three names for an animal that is a superhero.

// Animal: Cat
// Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline
// Animal: Dog
// Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot
// Animal: ${capitalizedAnimal}
// Names:`;
// }

function upperCaseInput(animal) {
  return animal[0].toUpperCase() + animal.slice(1).toLowerCase();
}
